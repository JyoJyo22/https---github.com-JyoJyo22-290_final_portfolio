{"ast":null,"code":"var _jsxFileName = \"/Users/jojohoughton1/CS290/final_portfolio_cs290/frontend/src/pages/WebDevPage.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction WebDevPage() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Web Development Concepts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      id: \"web-servers\",\n      className: \"main-text-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"About Web Servers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Welcome to the web dev page page. An \\\"index page\\\" is the default name for the home page of a website, depending on which web server that page is hosted on. This is the first page that users will interact with when they visit a website, it usually provides navigation to all other pages for the user. This way, the user does not have to include a specific path/file in the URL. They can simply use the domain name in the URL and the server will serve the user this index page if there is one. I created this index page with an HTMl file in VS Code. The <head> section of the HTML file contains meta-data about how this file should be interacted with via browsers, screen readers, etc. and the <body> section of the HTML file contains the client-constructed HTML content that will be displayed in the viewport of the browser. This is how users can interact with the content in this index.html file and this is how its content is constructed and displayed.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"When we look into the browser's web dev tools, we can view details on HTTP requests and responses. We can find our index.html page here and inspect it, and find that we can get a 200 response for this index.html page. This means that our web browser sent a GET request to the OSU Apache server and that Apache server sent back a 200 response which means \\\"I have found what you requested and I am returning it to you.\\\" We get 404 responses for both the main.css and main.js pages. This means that these pages were requested by the web browser but there is a client-side error causing these pages to not be located.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Now that this file has been transferred to the ENGR server, we can observe differences in the web dev tools. Most notably, the file served by my local machine lists no server and the host is listed as 127.0.0.1:5500. I have come to learn that this 127.0.0.1 can be called a \\\"loopback IP address\\\" and it allows a network to send a response to the same machine that delivered the request. The :5500 part is the port where my local machine is hosting the web page. The file served by the ENGR server lists the server in the HTTP response header as \\\"Apache/2.4.6\\\" which is the server that the OSU ENGR department uses. In the HTTP request header we can see the host listed as \\\"web.engr.oregonstate.edu.\\\" Another difference can be observed by viewing the HTTP response body. The file served by the ENGR servers lists the HTML file exactly as it appears in the index.html file. The file served by my local machine includes a script that is injected by the Live Server extension that I am using in VS Code in order to serve the web page locally.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The favicon.ico file returns a 200 status code because this image is injected by the server, the request is sent to https://web.engr.oregonstate.edu/favicon.ico and this page is properly located when one is on the ENGR server. The main.css and main.js however return 404 responses (client-side errors) because these pages are supposed to be created by the client (me) but since these pages don't exist on the client-side then they can't be located via an HTTP request, so the server will not find them. These pages are referenced in the HTML file (via href) but they were never created, thus they will return 404 until the client builds them.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This is the URL:       https://web.engr.oregonstate.edu/ ~houghtjo/assign1_houghtjo/. The scheme in this case is https, which stands for \\\"secured hypertext transfer protocol.\\\" This is the protocol that the client uses to request resources from the server, and the \\\"s\\\" part means that this client-server communication is encrypted. The subdomain is web.engr, and this is used to access different sections/pages of the main domain. In this case the ENGR subdomain is referring to the engineering \\\"section/department\\\" of the main oregonstate.edu domain. Thus oregonstate.edu is the host domain, and it is called such because this is where the desired resource is being hosted. This is where the client must send its request in order to find what it wants. The desired resource(s) are in this URL as /~houghtjo/assign1_houghtjo/, and this specifies the path which can represent the actual physical location of the resource on the server. It can also represent the path to a program which will serve the desired content.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      id: \"frontend-design\",\n      className: \"main-text-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Frontend Design\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"When we talk about frontend design we're simultaneously talking about user experience. In this sense, we can imagine that many frontend developers are also UX designers, or would collaborate closely with UX designers. This is to say that frontend developers must always keep in mind who their user is, what the user wants, what the user might expect out of the given product, etc. There's a famous quote in the design world that goes:   \\\"Always design a thing by considering it in its next larger context - a chair in a room, a room in a house, a house in an environment, an environment in a city plan.\\\" So when we design we're not just talking about visual appeal, but also usability and context.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"The 5 E's of Usability\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"dl\", {\n        children: [/*#__PURE__*/_jsxDEV(\"dt\", {\n          children: \"Effective\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"dd\", {\n          children: \"does the product actually allow users to accomplish their objectives?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"dt\", {\n          children: \"Efficient\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"dd\", {\n          children: \"have we minimized the number of steps users need to take to navigate their objectives?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"dt\", {\n          children: \"Easy to navigate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"dd\", {\n          children: \"have we equipped the product with easy and understandable wayfinding? will users be able to easily remember where they can go to achieve their goals?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"dt\", {\n          children: \"Error-free\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"dd\", {\n          children: \"is the product fully accessible? Can the product be adequately navigated without running into problems?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"dt\", {\n          children: \"Enjoyable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"dd\", {\n          children: \"is the user experience such that users will want to return to this product? what makes this product stand out to users amongst other products?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Page Layout Tags\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The purpose of page layout tags is to organize the web page and make sure that page flows nicely. This is our way of separating the contents of a page into sections like headers, footers, main section, navigation section, etc. This comes back to usability, if our content is not organized and readable then users won't come back. We can style and customize these sections further with CSS. We include <header> and <footer> tags at the top and bottom of each page, these help give the user a sense of consistency. That is, users know they are following along the same website whenever they navigate, and these tags also give off a sense of brand consistency. The <footer> also usually contains copyright and legal information. We use a <main> tag to contain all of the primary information on the page such as articles, paragraphs, figures, etc. This will go in between the header and footer tags and will serve as the meat of the page. The <section> and <article> tags are commonly used in tandem (within the <main> tag) to further group like-content together. This helps modularize the page and also serves to organize information for users who use screen readers. We also can use a <div> tag to group content that is of a dynamic nature. The <div> tag also serves as a wild card of sorts, we can use this tag whenever no other will suffice to hold the given information.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Anchor Tags\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The anchor tags allow us to:  create links between different pages within our app, create links to specific locations within a given page (we can use the \\\"id\\\" attribute for this, to bring the user to section \\\"id\\\"), and allow us to create links to external URLs. They do this via an \\\"href\\\" attribute which describes the location where the user will be taken once they click the link.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      id: \"images-and-css\",\n      className: \"main-text-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Images & CSS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Optimizing Images\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), \"There are some key specifications that we can keep in mind whenever we want to optimize photos for the web:\", /*#__PURE__*/_jsxDEV(\"dl\", {\n        children: [/*#__PURE__*/_jsxDEV(\"dt\", {\n          children: \" Descriptive File Names \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"dd\", {\n          children: \" We want to include as much information as we can in the file names of our photo files, this way, search engine bots and screen readers can make better use of our photos.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"dt\", {\n          children: \"Small File Sizes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"dd\", {\n          children: \"We want to make our photo file sizes as small as possible in order to minimize load times. One of the ways we can do this is via image compression.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"dt\", {\n          children: \"Make Dimensions Exact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"dd\", {\n          children: \"We have a certain space that our image will be within in our web page, we can crop and decrease the size of our image such that it fits this space more appropriately.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"dt\", {\n          children: \"Correct File Format\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"dd\", {\n          children: \"Different types of photos have different file types that accommodate those photos. Logos and icons go best with .gif, line-art is best suited with .png, interactive and/or animated images are best with .svg, low to high quality photos are more suited towards .jpg, and very high quality photos will be best with .webp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"dt\", {\n          children: \"Reducing the Resolution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"dd\", {\n          children: \"We can adjust the resolution of our images depending on the monitor that will be displaying those images. A lower-resolution monitor will perform better with lower-resolution images.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"dt\", {\n          children: \"Color Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"dd\", {\n          children: \"We want to use the RGB color mode for .webp, .svg, .jpg, and .png files, but for .gif files we want to use Indexed color mode.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"CSS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Why CSS?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"CSS stands for \\\"cascading style sheets\\\" and the reason we incorporate them into our web pages is so that we can give our web pages a specific look, a specific style, and also so that we can make our pages more usable, readable, and engaging. CSS is what allows a brand to have its own style and marketing characteristics on the web. If our web pages were only built with HTML, then they would lack the qualities that make users want to return to our site, thus CSS is how we incorporate usability and how we make our product stand out.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Incorporating CSS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), \"Here are key ways we can fold our CSS into our HTML documents:\", /*#__PURE__*/_jsxDEV(\"dl\", {\n        children: [/*#__PURE__*/_jsxDEV(\"dt\", {\n          children: \"Externally-linked CSS files (preferred method)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"dd\", {\n          children: \"We can link our CSS file in the <head> block of an HTML file with a statement like the following:  <link rel=\\\"my_stylesheet\\\" href=\\\"main.css\\\" /> and we can also import our CSS component files as in the following:    @import my_component.css\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"dt\", {\n          children: \"Style tags embedded in HTML\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"dd\", {\n          children: \"<style> h3 {color: orange;} </style>\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"dt\", {\n          children: \"Inline HTML styles\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"dd\", {\n          children: \"eg:    <h3 style=\\\"color: orange\\\" >\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"dt\", {\n          children: \"Javascript Template Literals\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"dd\", {\n          children: \"eg:    const my_heading = styled.h2`  color : orange;  ';\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"dt\", {\n          children: \"Regular Javascript (interaction with the DOM)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"dd\", {\n          children: \"eg:    document.getElementsByTagName('h3') .style.color = 'blue';\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Page Layout Blocks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"It is important to specify page layout blocks in our HTML file not only so that the content of our page is organized, but also so that search engine bots and screen readers can navigate our page, thus aiding usability. We then can use CSS to adjust the margins/borders/paddings around each of these layout blocks, as well as add colors and any other styling we want.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      id: \"forms\",\n      className: \"main-text-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Forms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"The Major Goals of Form Accessibility\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"We need to put clear instructions both in the labels and above the form, this way screen readers are able to tell what the sections of the form are for. We also must let the users know why we need their input and which inputs are required. We can set the first field in our form to autofocus so that users are immediately prompted and they don't need to return to their mouse or trackpad to start filling out the form. We should make sure that each form field can be completed with only a keyboard (no mouse nor trackpad), this way users who don't use mouses can fill out the form. For example, an html <Select> form can be navigated using arrow keys and the enter key. We can also apply tab indexing to our form to allow users to transfer from form field to form field without leaving the keyboard. This also clarifies the order in which the form fields should be filled out. Additionally, we need to ensure that validation messages are screen-readable, because not all browser messages are.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"All About Form Controls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n        className: \"form-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"The <form> tag\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This is the tag that actually creates a form in html. We can populate a form tag with anything except for another form tag. Mainly, we will fill our form tags with tags that take in user input (listed below). The 2 major attributes of a form tag are the \\\"action\\\" and \\\"method\\\" attributes. The action attribute tells where the form request will be sent to, and the method attribute describes which HTTP method will be used to send the HTTP request that the forms sends when submitted.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"The <fieldset> tag\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This tag separates form fields into groups, thus making it easier for users with screen readers to decipher the different form fields.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"The <legend> tag\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This tag also helps separate form fields into groups, but it will also include prompts that give users more understanding as to what a specific form group is for.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"The <label> tag\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This tag puts a label next to any kind of form field that involves user input, this way users can understand what that form control is for (this is especially helpful for users with screen readers). We use a \\\"for\\\" attribute with these which points to the form field that the label applies to.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"The <input> tag\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This tag puts a label next to any kind of form field that involves user input, this way users can understand what that form control is for (this is especially helpful for users with screen readers). We can use a \\\"for\\\" attribute with input tags to point to the form field that the label applies to. We can also include a \\\"required\\\" attribute which requires users to fill out a form field before they can submit the form. The \\\"type\\\" attribute will determine what type of input the particular form field will be, this type can be an email type, a text type, radio type, checkbox type, and more. Important for any input field is also the \\\"name\\\" attribute, this is how the server maps a user response to its respective form field. In this way, the \\\"name\\\" attribute acts like a key, whereas the user input to that form field acts like the value to that key. The \\\"pattern\\\" attribute serves as a validator for user input, if the user does not match the pattern with their input, then form submission can be restricted until they do so.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"The <select> tag\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"The select tag will give the user a drop-down menu of options to choose from, and each option is represented with an <option> tag. The select tag will also make use of the \\\"name\\\" attribute, and it can utilize many of the same attributes as the <input> tag.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"The <textarea> tag\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"The textarea tag will present users with a empty text block that allows them to enter multiple lines of text. This is usually used for receiving feedback or comments from users as it doesn't restrict users to given options or selections. The textarea tag will also make use of the \\\"name\\\" attribute, and it can utilize many of the same attributes as the <input> tag.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"The <button> tag\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"The button tag is usually used as a \\\"submit\\\" button so that users can submit the entire form. This is what commits the \\\"action\\\" attribute that we saw in the <form> tag itself.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Styling our Forms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"We can style our forms such that users can more easily interact with them. Since many users will be interacting with our app via phone, it is important to make any buttons anc click-ables large enough to be touched with large fingers on a touch screen. With phones in mind, we also want to provide adequate spacing between our components in order to accommodate screen sizes both small and large. We can display our labels such that they are easily associated with their respective form controls. Increasing the font size can also make our text more legible, while maintaining a consistent font family can help our form adhere to brand recognition. We can also style \\\"required\\\" fields differently from the rest of the form so it is obvious to users which fields are required to fill out and which are not. We can also include \\\"hover\\\" and \\\"focus\\\" properties so that users can be easily aware of which form field they are interacting with. Properties like \\\"valid\\\" and \\\"invalid\\\" can also be useful in that they can provide style changes that allow users to know if they have correctly filled out a field or not. Additionally, we can add in \\\"enabled\\\" and \\\"disabled\\\" attributes in order to restrict access to certain elements in the form that should only be accessible until the user has completed a prerequisite form control. These are just a taste of all of the ways that web designers can improve the usability of their web forms.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      id: \"node\",\n      className: \"main-text-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Node, npm, & Express\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n        className: \"node-npm-express\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 21\n        }, this), \"Node is a Javascript environment which can run Javascript outside of a browser. Before Node.js, Javascript was only used as a client-side language for building web pages and making them interactive. At this point Javascript was not able to directly interact with the servers, file systems, databases, nor networks which javascript was sending requests to from the front end. Node is what allowed Javascript to not only directly interact with these back end components, but also developers can now create web servers and web API's in Javascript. So instead of just sending requests from the front end, Javascript can now also handle those requests and deliver responses from the back end. This improves the development cycle for web designers since now they are able to build both the client side and server side of their application with one core language. Node.js thus comes with a large set of libraries and modules that can be installed in order to accomplish many back end tasks. While we'll see that we can use other .js frameworks to set up Javascript API's, it is Node.js that would be used to perform server-side logic and actually query databases.\", /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"npm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 21\n        }, this), \"The acronym \\\"npm\\\" stands for \\\"Node Package Manager\\\" and it is the main package handler for Node. Whenever our web project requires some outside package, we can install that package via npm. Npm allows developers to install these packages from the command line and once installed npm will automatically inject that package into the project directory, usually in a folder named \\\"node modules\\\" along with all of the other installed packages. In fact, developers will usually start their project with a large list of packages since npm will also install any dependencies that our installed packages require. Npm will also manage any updates or version changes involved with the packages we are using. When we run \\\"npm init\\\" in the terminal, npm will inject a package.json file that will initiate a Node.js project. This package.json file is where we can find a list of the packages that we have installed in our project. On top of that, the package.json file will also define our project along with a name and description. From the terminal, we can run \\\"npm start\\\" in order to start our Node application, this \\\"start\\\" command refers back to file defined the package.json project definition. Without npm, web developers would have a much more difficult time keeping track of all the packages they need as well as maintaining changes amongst those packages.\", /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Express\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 21\n        }, this), \"Express.js is a framework built on top of Node which makes developing API's and web applications easier with Node. While Node was equipped with basic APIs, Express added on many more extensions for easier development such as routing and 'middleware' APIs. Thus while Node is our web server for our back end javascript application, Express is the middleman between this server and our client side javascript, thus it handles HTTP requests and responses between the front end and the back end. Express features an \\\"app\\\" API that both 'listens' for incoming HTTP requests from the front end javascript and also sends HTTP responses from the back end Node server. A developer can then make a call such as \\\"app.get\\\" and Express will take this HTTP GET request, along with whatever URL path the developer provided, and it will perform the necessary routing (with a \\\"req\\\" object) such that it can \\\"get\\\" something from that given database. Express then uses its \\\"res\\\" object to hold the HTTP response and it can send this response back to the client. It is worth noting that Node is able to perform this whole process without Express, but Express was introduced to make this whole process simpler and more readable for the developer. The middleware APIs of Express also add more functionality to this request-response exchange such as:  error-handling, authentication, and logging.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      id: \"js\",\n      className: \"main-text-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Javascript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n        className: \"node-npm-express\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Main Data Types\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 21\n        }, this), \"Javascript (JS) contains 6 main data types:   numbers, Boolean values, strings, symbols, null/undefined types, and objects. Numbers in JS are double-precision floating-point numbers in memory, and Boolean values simply evaluate to either True or False. JS strings can be enclosed in either double or single quotes and can also be single characters. In JS we can also use \\\"Template Literals\\\" which are strings that have other JS expressions embedded within them. We can include many other forms of JS inside these expressions, such as JS objects, function calls, variables, HTML, etc. and after evaluating these expressions, JS will convert the value into a string and include it with the other string data. In order to indicate an absence of a value, JS will still return \\\"null\\\" or \\\"undefined\\\" instead of doing nothing. A JS object is a set of name:value pairs, and after we initialize our object, we can perform create, read, update, and delete operations on that object. The names of the pairs are strings, and the values can be any data type.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n        className: \"node-npm-express\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Objects, Arrays, JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 21\n        }, this), \"Javascript (JS) objects are our main tool for structuring our data in JS, they serve as our main scaffold for our program. For example, one can make a tree object, and they then assign various names or \\\"properties\\\" to that tree object, and each of these properties has a value. Thus one can give their tree a \\\"leaf\\\" name which has the value \\\"maple\\\" for maple leaves, or it can have a value like 200, so the tree now has 200 leaves, the options for object construction are limitless. We can also assign functions as values, thus giving our tree object dynamic functionality instead of just static qualities. An array is another type of JS object which is itself a collection of other data types, including objects, and even other arrays. We can thus make many different types of our tree object, and then we can place all of them in a \\\"forest\\\" array. Now we have a collection of trees, and all of these can be manipulated simultaneously (via a loop) with JS's built-in array methods. So our objects can all \\\"own\\\" their own methods, and now on top of that we have a a way of grouping all of them together such that we can interact with all of them as a group. JSON or \\\"Javascript Object Notation\\\" can be described as an \\\"intermediate object\\\" that acts between different programming languages. We can use JSON to convert an object in one programming language to an object in another programming language, and this transform occurs via an intermediary JSON string. Most programming languages will now come with libraries that feature JSON support, thus they will each have their own ability to convert their objects into JSON strings and to convert JSON strings into their type of objects. JSON is thus used on the frontend to transmit data between, say, a web application and the web server, it has become the most popular language with which to transmit data between applications.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n        className: \"node-npm-express\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Conditionals & Loops\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 21\n        }, this), \"Javascript (JS) makes use of conditional statements which can control or redirect the flow of a program based on the condition. Thus our application can then make decisions based on whether or not a certain case has happened or not. In JS we can use the statements \\\"if,\\\" \\\"else,\\\" and \\\"else if\\\" in order to branch our control flow into different directions, or to respond to user input in a certain way. JS also features a \\\"switch\\\" statement which is a conditional statement that can respond with many different conditions depending on the state of a single variable or \\\"case.\\\" JS also features 5 different loop statements which can iterate over a collection of values or for a certain number of specified times. The \\\"while\\\" and \\\"do while\\\" loops will execute only while a certain specified condition is true, with the only difference being that the \\\"do while\\\" loop will execute the loop statement, then check if the condition for the loop is still true, and the \\\"while\\\" loop will check the condition before it executes the loop statement at all. We can also use the \\\"for\\\" loop to iterate for a certain number of times when we already know how many times we need to loop over our statement. JS also features a \\\"for of\\\" loop for iterating over the elements of a pre-existing string or array, and we also can utilize the \\\"for in\\\" loop to iterate over the properties of a pre-existing object. Additionally, any time we need to break out of the loop, we can include a \\\"break\\\" statement, or anytime we would like our loop to skip to the next loop iteration (without executing any remaining code), we can put in a \\\"continue\\\" statement.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n        className: \"node-npm-express\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Object-Oriented Programming\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 21\n        }, this), \"We can consider Javascript (JS) to be an object-oriented programming (OOP) language in the sense that it features objects which have their own identity, state, and behavior. An object has its own identity in the sense that it has its own properties (or \\\"names\\\") and each of these have their own values. The object has state in the sense that those values can change as the object \\\"interacts\\\" within the program or with the user. An object can also have behavior in the sense that it can contain functions which operate on data or input from the rest of the application. Thus, we don't just create a variable called \\\"tree,\\\" but rather we can create a \\\"tree\\\" object that contains many different properties and functions, and this \\\"tree\\\" can change depending on the flow of the program. Modern JS makes object construction more organized via \\\"classes.\\\" We can thus create Classes, and these Classes will act like object generators from which we can instantiate as many objects of that Class as we need. So we can now have a \\\"tree\\\" Class, from which we can create many trees, all of which will have the features that the tree Class has, along with any other properties that the individual trees themselves wish to add in. So with OOP we can now view our program or application as its own world of objects, each of which can interact each other and change the flow of the program with their own behavior.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n        className: \"node-npm-express\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Functional Programming\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 21\n        }, this), \"Functional Programming (FP) is yet another feature that can be utilized in JS and it usually is contrasted with OOP as a separate programming \\\"paradigm\\\" or methodology. Instead of the main focus being on objects, with FP the focus is on functions, functions which are not \\\"owned\\\" by any object and are in fact \\\"stateless.\\\" Thus instead of the state-changes which are a key component of OOP, in FP \\\"immutability\\\" will be an important tenet. That is, functions in FP will receive inputs and deliver outputs, ans this is how data will be manipulated in FP. Whereas in OOP, those functions would be owned by the object and be tied to some change of state of that object. But FP does not prioritize objects, and thus it is functions that will be called the \\\"first class\\\" values in FP. And since functions are the primary players in FP, they can be assigned to variables, they can receive other functions as parameters, and they can return other functions. In JS, we can utilize both OOP and FP in order to both construct objects and classes, and also to make use of \\\"higher-order\\\" functions such as \\\"map\\\" and \\\"filter.\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      id: \"dom\",\n      className: \"main-text-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"DOM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 17\n      }, this), \"After the server sends its HTML, CSS, and JavaScript documents to the browser, that browser will construct a Document Object Model or \\\"DOM\\\" as it's called. And this DOM is presented by a web API provided by the browser. So now that the server has sent all required materials needed to construct the given page over to the browser, the browser then parses the HTML in order to build the DOM. This DOM is built as a tree-like structure in which each node corresponds to an element in the HMTL document. Afterwards, the browser can then utilize this tree to apply the CSS styles to their respective HTML elements. The browser can simply traverse the DOM tree in order to find which CSS selectors apply to which tree nodes (the HTML elements). So where do JavaScript and Express enter into this DOM picture? Well the DOM API provides a set of objects, methods, and properties that allow JavaScript code to access and manipulate the nodes (the HTML elements) and properties (CSS styles and methods) of the DOM tree. So the DOM API provides many different types of objects, for example, the web developer can access the \\\"document\\\" object which is actually the root of the DOM tree, and this \\\"document\\\" object will thus act as a global object with regards to interaction with that web page. We can thus access the entire \\\"document\\\" if we like, or we can access nodes further down in the DOM tree such as all <paragraph> tags, or a single <paragraph> element via its ID, or a form via its class name. And the DOM API provides us with methods to do just this, we can use statements like \\\"document.getElementsByTagName('p')\\\" or \\\"document.getElementById('my-paragraph')\\\" to access the element that we want to manipulate via JavaScript. In that same JavaScript code, we can also write a line such as \\\"document.addEventListener\\\" and these \\\"Event Listeners\\\" will be waiting for user-initiated \\\"Events\\\" which the JavaScript code will then respond to based upon some developer-customized response. These \\\"Events\\\" can be anything from a page load, to a scroll, to a click, to a form submission - however we want to act on the page. And this is where Express.js comes into the picture, we can also link up elements in our HTML with user Events that can send requests to our Express server. In these Events we can obtain various information from the DOM, including DOM elements or objects (and their methods or values), and pass this information in the request to Express. The Express server can then be coded to deliver an Event-specific response back to the client-side JavaScript, and this browser-side JavaScript can use the information in the server response to act on the web page and make it dynamic. Web developers are thus able to update the DOM of a web page from both client-side JavaScript and from server-side JavaScript via Express.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_c = WebDevPage;\nexport default WebDevPage;\nvar _c;\n$RefreshReg$(_c, \"WebDevPage\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","WebDevPage","children","fileName","_jsxFileName","lineNumber","columnNumber","id","className","_c","$RefreshReg$"],"sources":["/Users/jojohoughton1/CS290/final_portfolio_cs290/frontend/src/pages/WebDevPage.js"],"sourcesContent":["import React from \"react\"\n\nfunction WebDevPage() {\n    return(\n        <>\n            <h2>Web Development Concepts</h2>\n            <article id=\"web-servers\" className=\"main-text-section\">\n                <h3>About Web Servers</h3>\n                <p>\n                    Welcome to the web dev page page. An \"index page\" is the default name for the home page of a website, \n                    depending on which web server that page is hosted on. This is the first page that users will\n                    interact with when they visit a website, it usually provides navigation to all other pages for\n                    the user. This way, the user does not have to include a specific path/file in the URL. They\n                    can simply use the domain name in the URL and the server will serve the user this index page\n                    if there is one. I created this index page with an HTMl file in VS Code. The &lt;head&gt; section\n                    of the HTML file contains meta-data about how this file should be interacted with via browsers, screen\n                    readers, etc. and the &lt;body&gt; section of the HTML file contains the client-constructed HTML\n                    content that will be displayed in the viewport of the browser. This is how users can interact with\n                    the content in this index.html file and this is how its content is constructed and displayed.\n                </p>\n                <p>\n                    When we look into the browser's web dev tools, we can view details on HTTP requests and responses. \n                    We can find our index.html page here and inspect it, and find that we can get a 200 response for \n                    this index.html page. This means that our web browser sent a GET request to the OSU Apache server\n                    and that Apache server sent back a 200 response which means \"I have found what you requested and I\n                    am returning it to you.\" We get 404 responses for both the main.css and main.js pages. This means that\n                    these pages were requested by the web browser but there is a client-side error causing these pages\n                    to not be located.\n\n                </p>\n                <p>\n                    Now that this file has been transferred to the ENGR server, we can observe differences in the web dev tools. \n                        Most notably, the file served by my local machine lists no server and the host is listed as 127.0.0.1:5500. \n                    I have come to learn that this 127.0.0.1 can be called a \"loopback IP address\" and it allows a network to send a\n                    response to the same machine that delivered the request. The :5500 part is the port where my local machine is\n                    hosting the web page.\n                        The file served by the ENGR server lists the server in the HTTP response header as \"Apache/2.4.6\" which is the \n                    server that the OSU ENGR department uses. In the HTTP request header we can see the host listed as\n                    \"web.engr.oregonstate.edu.\"\n                        Another difference can be observed by viewing the HTTP response body. The file served by the ENGR servers lists\n                        the HTML file exactly as it appears in the index.html file. The file served by my local machine includes a script\n                        that is injected by the Live Server extension that I am using in VS Code in order to serve the web page locally.\n\n                </p>\n                <p>\n                    The favicon.ico file returns a 200 status code because this image is injected by the server, the request is sent to\n                    https://web.engr.oregonstate.edu/favicon.ico and this page is properly located when one is on the ENGR server. \n                    The main.css and main.js however return 404 responses (client-side errors) because these pages are supposed to be\n                    created by the client (me) but since these pages don't exist on the client-side then they can't be located via an \n                    HTTP request, so the server will not find them. These pages are referenced in the HTML file (via href) but they\n                    were never created, thus they will return 404 until the client builds them.\n\n                </p>\n                <p>\n                    This is the URL:       https://web.engr.oregonstate.edu/ ~houghtjo/assign1_houghtjo/.\n                        The scheme in this case is https, which stands for \"secured hypertext transfer protocol.\" This is the protocol\n                    that the client uses to request resources from the server, and the \"s\" part means that this client-server \n                    communication is encrypted. \n                        The subdomain is web.engr, and this is used to access different sections/pages of the main domain. In this case\n                    the ENGR subdomain is referring to the engineering \"section/department\" of the main oregonstate.edu domain. Thus\n                    oregonstate.edu is the host domain, and it is called such because this is where the desired resource is being hosted.\n                    This is where the client must send its request in order to find what it wants.\n                        The desired resource(s) are in this URL as /~houghtjo/assign1_houghtjo/, and this specifies the path which\n                        can represent the actual physical location of the resource on the server. It can also represent the path to \n                        a program which will serve the desired content.\n\n                </p>\n            </article>\n            <article id=\"frontend-design\" className=\"main-text-section\">\n                <h3>Frontend Design</h3>\n                <p>\n                    When we talk about frontend design we're simultaneously talking about user experience. In this sense, we can\n                    imagine that many frontend developers are also UX designers, or would collaborate closely with UX designers. This\n                    is to say that frontend developers must always keep in mind who their user is, what the user wants, what the user\n                    might expect out of the given product, etc. There's a famous quote in the design world that goes:   \"Always design\n                    a thing by considering it in its next larger context - a chair in a room, a room in a house, a house in an environment,\n                    an environment in a city plan.\" So when we design we're not just talking about visual appeal, but also usability and\n                    context. \n                </p>\n            \n                <h5>The 5 E's of Usability</h5>\n                <dl>\n                    <dt>Effective</dt>\n                    <dd>does the product actually allow users to accomplish their objectives?</dd>\n                    <dt>Efficient</dt>\n                    <dd>have we minimized the number of steps users need to take to navigate their objectives?</dd>\n                    <dt>Easy to navigate</dt>\n                    <dd>have we equipped the product with easy and understandable wayfinding? \n                        will users be able to easily remember where they can go to achieve their goals?\n                    </dd>\n                    <dt>Error-free</dt>\n                    <dd>is the product fully accessible?\n                        Can the product be adequately navigated without running into problems?\n                    </dd>\n                    <dt>Enjoyable</dt>\n                    <dd>is the user experience such that users will want to return to this product?\n                        what makes this product stand out to users amongst other products?\n                    </dd>\n                </dl>\n                <h5>Page Layout Tags</h5>\n                <p>\n                    The purpose of page layout tags is to organize the web page and make sure that page flows nicely. This is our\n                    way of separating the contents of a page into sections like headers, footers, main section, navigation section, etc.\n                    This comes back to usability, if our content is not organized and readable then users won't come back. We can style \n                    and customize these sections further with CSS. We include &lt;header&gt; and &lt;footer&gt; tags at the top and\n                    bottom of each page, these help give the user a sense of consistency. That is, users know they are following\n                    along the same website whenever they navigate, and these tags also give off a sense of brand consistency. The\n                    &lt;footer&gt; also usually contains copyright and legal information. We use a &lt;main&gt; tag to contain all of\n                    the primary information on the page such as articles, paragraphs, figures, etc. This will go in between the header\n                    and footer tags and will serve as the meat of the page. The &lt;section&gt; and &lt;article&gt; tags are commonly\n                    used in tandem (within the &lt;main&gt; tag) to further group like-content together. This helps modularize the page\n                    and also serves to organize information for users who use screen readers. We also can use a &lt;div&gt; tag to group\n                    content that is of a dynamic nature. The &lt;div&gt; tag also serves as a wild card of sorts, we can use this tag\n                    whenever no other will suffice to hold the given information.\n                </p>\n                <h5>Anchor Tags</h5>\n                <p>\n                    The anchor tags allow us to:  create links between different pages within our app, create links to specific\n                    locations within a given page (we can use the \"id\" attribute for this, to bring the user to section \"id\"), \n                    and allow us to create links to external URLs. They do this via an \"href\" attribute which describes the location \n                    where the user will be taken once they click the link. \n                </p>\n            </article>\n            <article id=\"images-and-css\" className=\"main-text-section\">\n                <h3>Images & CSS</h3>\n                <h5>Optimizing Images</h5>\n                    There are some key specifications that we can keep in mind whenever we want to optimize photos for the web:\n                    <dl>\n                        <dt> Descriptive File Names </dt>\n                        <dd> We want to include as much information as we can in the file names of our photo files, this way,\n                            search engine bots and screen readers can make better use of our photos.\n                        </dd>\n                        <dt>Small File Sizes</dt>\n                        <dd>We want to make our photo file sizes as small as possible in order to minimize load times. One\n                            of the ways we can do this is via image compression.\n                        </dd>\n                        \n                        <dt>Make Dimensions Exact</dt>\n                        <dd>We have a certain space that our image will be within in our web page, we can crop and decrease the\n                            size of our image such that it fits this space more appropriately.\n                        </dd>\n                                \n                        <dt>Correct File Format</dt>\n                        <dd>Different types of photos have different file types that accommodate those photos. Logos and icons \n                            go best with .gif, line-art is best suited with .png, interactive and/or animated images are best\n                            with .svg, low to high quality photos are more suited towards .jpg, and very high quality photos \n                            will be best with .webp\n                        </dd>\n                        <dt>Reducing the Resolution</dt>\n                        <dd>We can adjust the resolution of our images depending on the monitor that will be displaying those\n                            images. A lower-resolution monitor will perform better with lower-resolution images.\n                        </dd>\n                        <dt>Color Mode</dt>\n                        <dd>We want to use the RGB color mode for .webp, .svg, .jpg, and .png files, but for .gif files\n                            we want to use Indexed color mode.\n                        </dd>\n                    </dl>\n                <h3>CSS</h3>\n                <h5>Why CSS?</h5>\n                <p>\n                    CSS stands for \"cascading style sheets\" and the reason we incorporate them into our web pages is so \n                    that we can give our web pages a specific look, a specific style, and also so that we can make our\n                    pages more usable, readable, and engaging. CSS is what allows a brand to have its own style and \n                    marketing characteristics on the web. If our web pages were only built with HTML, then they would\n                    lack the qualities that make users want to return to our site, thus CSS is how we incorporate \n                    usability and how we make our product stand out.\n                </p>\n                <h5>Incorporating CSS</h5>\n                    Here are key ways we can fold our CSS into our HTML documents: \n                    <dl>\n                        <dt>Externally-linked CSS files &#40;preferred method&#41;</dt>\n                        <dd>We can link our CSS file in the &lt;head&gt; block of an HTML file with a statement like\n                            the following:  &lt;link rel=\"my_stylesheet\" href=\"main.css\" /&gt; and we can also import our \n                            CSS component files as in the following:    @import my_component.css \n                        </dd>\n                        <dt>Style tags embedded in HTML</dt>\n                        <dd>&lt;style&gt; h3 &#123;color: orange;&#125; &lt;/style&gt;</dd>  \n                        <dt>Inline HTML styles</dt>\n                        <dd>eg:    &lt;h3 style=\"color: orange\" &gt;</dd>\n                        <dt>Javascript Template Literals</dt>\n                        <dd>eg:    const my_heading = styled.h2`  color : orange;  ';</dd>\n                        <dt>Regular Javascript &#40;interaction with the DOM&#41;</dt>\n                        <dd>eg:    document.getElementsByTagName&#40;'h3'&#41;\n                            .style.color = 'blue';\n                        </dd>\n                    </dl>\n                <h5>Page Layout Blocks</h5>\n                <p>\n                    It is important to specify page layout blocks in our HTML file not only so that the content of our page is \n                    organized, but also so that search engine bots and screen readers can navigate our page, thus aiding\n                    usability. We then can use CSS to adjust the margins/borders/paddings around each of these layout blocks, as\n                    well as add colors and any other styling we want.\n                </p>\n            </article>\n            <article id=\"forms\" className=\"main-text-section\">\n                <h3>Forms</h3>\n                <h4>The Major Goals of Form Accessibility</h4>\n                <p>\n                    We need to put clear instructions both in the labels and above the form, this way screen readers are\n                    able to tell what the sections of the form are for.\n                    We also must let the users know why we need their input and which inputs are required.\n                    We can set the first field in our form to autofocus so that users are immediately prompted and\n                    they don't need to return to their mouse or trackpad to start filling out the form.\n                    We should make sure that each form field can be completed with only a keyboard (no mouse nor trackpad),\n                    this way users who don't use mouses can fill out the form. For example, an html &lt;Select&gt; form \n                    can be navigated using arrow keys and the enter key.\n                    We can also apply tab indexing to our form to allow users to transfer from form field to form field without\n                    leaving the keyboard. This also clarifies the order in which the form fields should be filled out.\n                    Additionally, we need to ensure that validation messages are screen-readable, because not all browser \n                    messages are.\n                </p>\n                <h4>All About Form Controls</h4>\n                <article className=\"form-controls\">\n                    <h5>The &lt;form&gt; tag</h5>\n                    <p>\n                    This is the tag that actually creates a form in html. We can populate a form tag with anything except\n                    for another form tag. Mainly, we will fill our form tags with tags that take in user input (listed below).\n                    The 2 major attributes of a form tag are the \"action\" and \"method\" attributes. The action attribute tells\n                    where the form request will be sent to, and the method attribute describes which HTTP method will be used\n                    to send the HTTP request that the forms sends when submitted.\n                    </p>\n                    <h5>The &lt;fieldset&gt; tag</h5>\n                    <p>\n                    This tag separates form fields into groups, thus making it easier for users with screen readers to \n                    decipher the different form fields.\n                    </p>\n                    <h5>The &lt;legend&gt; tag</h5>\n                    <p>\n                    This tag also helps separate form fields into groups, but it will also include prompts that give users\n                    more understanding as to what a specific form group is for.\n                    </p>\n                    <h5>The &lt;label&gt; tag</h5>\n                    <p>\n                    This tag puts a label next to any kind of form field that involves user input, this way users can \n                    understand what that form control is for (this is especially helpful for users with screen readers).\n                    We use a \"for\" attribute with these which points to the form field that the label applies to.\n                    </p>\n                    <h5>The &lt;input&gt; tag</h5>\n                    <p>\n                    This tag puts a label next to any kind of form field that involves user input, this way users can \n                    understand what that form control is for (this is especially helpful for users with screen readers).\n                    We can use a \"for\" attribute with input tags to point to the form field that the label applies to.\n                    We can also include a \"required\" attribute which requires users to fill out a form field before they\n                    can submit the form. The \"type\" attribute will determine what type of input the particular form field\n                    will be, this type can be an email type, a text type, radio type, checkbox type, and more. Important \n                    for any input field is also the \"name\" attribute, this is how the server maps a user response to its \n                    respective form field. In this way, the \"name\" attribute acts like a key, whereas the user input to \n                    that form field acts like the value to that key. The \"pattern\" attribute serves as a validator for \n                    user input, if the user does not match the pattern with their input, then form submission can be \n                    restricted until they do so.\n                    </p>\n                    <h5>The &lt;select&gt; tag</h5>\n                    <p>\n                    The select tag will give the user a drop-down menu of options to choose from, and each option is\n                    represented with an &lt;option&gt; tag. The select tag will also make use of the \"name\" attribute,\n                    and it can utilize many of the same attributes as the &lt;input&gt; tag.\n                    </p>\n                    <h5>The &lt;textarea&gt; tag</h5>\n                    <p>\n                    The textarea tag will present users with a empty text block that allows them to enter multiple lines \n                    of text. This is usually used for receiving feedback or comments from users as it doesn't restrict\n                    users to given options or selections. The textarea tag will also make use of the \"name\" attribute,\n                    and it can utilize many of the same attributes as the &lt;input&gt; tag.\n                    </p>\n                    <h5>The &lt;button&gt; tag</h5>\n                    <p>\n                    The button tag is usually used as a \"submit\" button so that users can submit the entire form. This\n                    is what commits the \"action\" attribute that we saw in the &lt;form&gt; tag itself.\n                    </p>\n                </article>\n                <h4>Styling our Forms</h4>\n                    <p>\n                        We can style our forms such that users can more easily interact with them. Since many users will be \n                        interacting with our app via phone, it is important to make any buttons anc click-ables large enough\n                        to be touched with large fingers on a touch screen. With phones in mind, we also want to provide \n                        adequate spacing between our components in order to accommodate screen sizes both small and large. We \n                        can display our labels such that they are easily associated with their respective form controls. Increasing\n                        the font size can also make our text more legible, while maintaining a consistent font family can help\n                        our form adhere to brand recognition. We can also style \"required\" fields differently from the rest of\n                        the form so it is obvious to users which fields are required to fill out and which are not. We can also \n                        include \"hover\" and \"focus\" properties so that users can be easily aware of which form field they are\n                        interacting with. Properties like \"valid\" and \"invalid\" can also be useful in that they can provide\n                        style changes that allow users to know if they have correctly filled out a field or not. Additionally, \n                        we can add in \"enabled\" and \"disabled\" attributes in order to restrict access to certain elements in the\n                        form that should only be accessible until the user has completed a prerequisite form control. These are\n                        just a taste of all of the ways that web designers can improve the usability of their web forms.\n                    </p>\n            </article>\n            <article id=\"node\" className=\"main-text-section\">\n                <h3>Node, npm, & Express</h3>\n                <article className=\"node-npm-express\">\n                    <h5>Node</h5>\n                    Node is a Javascript environment which can run Javascript outside of a browser. Before Node.js, \n                    Javascript was only used as a client-side language for building web pages and making them \n                    interactive. At this point Javascript was not able to directly interact with the servers, file\n                    systems, databases, nor networks which javascript was sending requests to from the front end. Node\n                    is what allowed Javascript to not only directly interact with these back end components, but also\n                    developers can now create web servers and web API's in Javascript. So instead of just sending requests \n                    from the front end, Javascript can now also handle those requests and deliver responses from the back end. \n                    This improves the development cycle for web designers since now they are able to build both the client side \n                    and server side of their application with one core language. Node.js thus comes with a large set of libraries\n                    and modules that can be installed in order to accomplish many back end tasks. While we'll see that we can\n                    use other .js frameworks to set up Javascript API's, it is Node.js that would be used to perform server-side \n                    logic and actually query databases.\n                    <h5>npm</h5>\n                    The acronym \"npm\" stands for \"Node Package Manager\" and it is the main package handler for Node. \n                    Whenever our web project requires some outside package, we can install that package via npm. Npm\n                    allows developers to install these packages from the command line and once installed npm will \n                    automatically inject that package into the project directory, usually in a folder named \"node \n                    modules\" along with all of the other installed packages. In fact, developers will usually start\n                    their project with a large list of packages since npm will also install any dependencies that \n                    our installed packages require. Npm will also manage any updates or version changes involved \n                    with the packages we are using. When we run \"npm init\" in the terminal, npm will inject a package.json \n                    file that will initiate a Node.js project. This package.json file is where we can find a list of the \n                    packages that we have installed in our project. On top of that, the package.json file will also define \n                    our project along with a name and description. From the terminal, we can run \"npm start\" in order to \n                    start our Node application, this \"start\" command refers back to file defined the package.json project\n                    definition. Without npm, web developers would have a much more difficult time keeping track of all the\n                    packages they need as well as maintaining changes amongst those packages.\n                    <h5>Express</h5>\n                    Express.js is a framework built on top of Node which makes developing API's and web applications\n                    easier with Node. While Node was equipped with basic APIs, Express added on many more extensions \n                    for easier development such as routing and 'middleware' APIs. Thus while Node is our web server for our \n                    back end javascript application, Express is the middleman between this server and our client side javascript, \n                    thus it handles HTTP requests and responses between the front end and the back end. Express features an \"app\" \n                    API that both 'listens' for incoming HTTP requests from the front end javascript and also sends HTTP responses \n                    from the back end Node server. A developer can then make a call such as \"app.get\" and Express will take this \n                    HTTP GET request, along with whatever URL path the developer provided, and it will perform the necessary routing\n                    (with a \"req\" object) such that it can \"get\" something from that given database. Express then uses its \"res\" object\n                    to hold the HTTP response and it can send this response back to the client. It is worth noting that Node is able\n                    to perform this whole process without Express, but Express was introduced to make this whole process simpler and \n                    more readable for the developer. The middleware APIs of Express also add more functionality to this request-response\n                    exchange such as:  error-handling, authentication, and logging. \n                </article>\n            </article>\n            <article id=\"js\" className=\"main-text-section\">\n                <h3>Javascript</h3>\n                <article className=\"node-npm-express\">\n                    <h5>Main Data Types</h5>\n                    Javascript (JS) contains 6 main data types:   numbers, Boolean values, strings, symbols, null/undefined types, \n                    and objects. Numbers in JS are double-precision floating-point numbers in memory, and Boolean values\n                    simply evaluate to either True or False. JS strings can be enclosed in either double or single quotes and\n                    can also be single characters. In JS we can also use \"Template Literals\" which are strings that have other JS\n                    expressions embedded within them. We can include many other forms of JS inside these expressions, such as\n                    JS objects, function calls, variables, HTML, etc. and after evaluating these expressions, JS will convert \n                    the value into a string and include it with the other string data. In order to indicate an absence of a \n                    value, JS will still return \"null\" or \"undefined\" instead of doing nothing. A JS object is a \n                    set of name:value pairs, and after we initialize our object, we can perform create, read, update, and \n                    delete operations on that object. The names of the pairs are strings, and the values can be any data type.\n                </article>\n                <article className=\"node-npm-express\">\n                    <h5>Objects, Arrays, JSON</h5>\n                    Javascript (JS) objects are our main tool for structuring our data in JS, they serve as our main scaffold\n                    for our program. For example, one can make a tree object, and they then assign various names or \"properties\"\n                    to that tree object, and each of these properties has a value. Thus one can give their tree a \"leaf\" name \n                    which has the value \"maple\" for maple leaves, or it can have a value like 200, so the tree now has 200\n                    leaves, the options for object construction are limitless. We can also assign functions as values, thus\n                    giving our tree object dynamic functionality instead of just static qualities. An array is another type of\n                    JS object which is itself a collection of other data types, including objects, and even other arrays. We\n                    can thus make many different types of our tree object, and then we can place all of them in a \"forest\" array.\n                    Now we have a collection of trees, and all of these can be manipulated simultaneously (via a loop) with \n                    JS's built-in array methods. So our objects can all \"own\" their own methods, and now on top of that we have a \n                    a way of grouping all of them together such that we can interact with all of them as a group. JSON or \"Javascript\n                    Object Notation\" can be described as an \"intermediate object\" that acts between different programming languages. \n                    We can use JSON to convert an object in one programming language to an object in another programming language, \n                    and this transform occurs via an intermediary JSON string. Most programming languages will now come with \n                    libraries that feature JSON support, thus they will each have their own ability to convert their objects into\n                    JSON strings and to convert JSON strings into their type of objects. JSON is thus used on the frontend to \n                    transmit data between, say, a web application and the web server, it has become the most popular language\n                    with which to transmit data between applications. \n                </article>\n                <article className=\"node-npm-express\">\n                    <h5>Conditionals & Loops</h5>\n                    Javascript (JS) makes use of conditional statements which can control or redirect the flow of a program based on \n                    the condition. Thus our application can then make decisions based on whether or not a certain case has\n                    happened or not. In JS we can use the statements \"if,\" \"else,\" and \"else if\" in order to branch our control\n                    flow into different directions, or to respond to user input in a certain way. JS also features a \"switch\" \n                    statement which is a conditional statement that can respond with many different conditions depending on\n                    the state of a single variable or \"case.\" JS also features 5 different loop statements which can iterate\n                    over a collection of values or for a certain number of specified times. The \"while\" and \"do while\" loops \n                    will execute only while a certain specified condition is true, with the only difference being that the \"do\n                    while\" loop will execute the loop statement, then check if the condition for the loop is still true, and the\n                    \"while\" loop will check the condition before it executes the loop statement at all. We can also use the \"for\"\n                    loop to iterate for a certain number of times when we already know how many times we need to loop over our\n                    statement. JS also features a \"for of\" loop for iterating over the elements of a pre-existing string or\n                    array, and we also can utilize the \"for in\" loop to iterate over the properties of a pre-existing object.\n                    Additionally, any time we need to break out of the loop, we can include a \"break\" statement, or anytime we\n                    would like our loop to skip to the next loop iteration (without executing any remaining code), we can put \n                    in a \"continue\" statement.\n                </article>\n                <article className=\"node-npm-express\">\n                    <h5>Object-Oriented Programming</h5>\n                    We can consider Javascript (JS) to be an object-oriented programming (OOP) language in the sense that it features\n                    objects which have their own identity, state, and behavior. An object has its own identity in the sense that it\n                    has its own properties (or \"names\") and each of these have their own values. The object has state in the sense\n                    that those values can change as the object \"interacts\" within the program or with the user. An object can also\n                    have behavior in the sense that it can contain functions which operate on data or input from the rest of the\n                    application. Thus, we don't just create a variable called \"tree,\" but rather we can create a \"tree\" object that\n                    contains many different properties and functions, and this \"tree\" can change depending on the flow of the program.\n                    Modern JS makes object construction more organized via \"classes.\" We can thus create Classes, and these Classes\n                    will act like object generators from which we can instantiate as many objects of that Class as we need. So we\n                    can now have a \"tree\" Class, from which we can create many trees, all of which will have the features that the\n                    tree Class has, along with any other properties that the individual trees themselves wish to add in. So with OOP\n                    we can now view our program or application as its own world of objects, each of which can interact each other\n                    and change the flow of the program with their own behavior. \n                </article>\n                <article className=\"node-npm-express\">\n                    <h5>Functional Programming</h5>\n                    Functional Programming (FP) is yet another feature that can be utilized in JS and it usually is contrasted\n                    with OOP as a separate programming \"paradigm\" or methodology. Instead of the main focus being on objects, \n                    with FP the focus is on functions, functions which are not \"owned\" by any object and are in fact \"stateless.\"\n                    Thus instead of the state-changes which are a key component of OOP, in FP \"immutability\" will be an important\n                    tenet. That is, functions in FP will receive inputs and deliver outputs, ans this is how data will be manipulated\n                    in FP. Whereas in OOP, those functions would be owned by the object and be tied to some change of state of that \n                    object. But FP does not prioritize objects, and thus it is functions that will be called the \"first class\" values\n                    in FP. And since functions are the primary players in FP, they can be assigned to variables, they can receive \n                    other functions as parameters, and they can return other functions. In JS, we can utilize both OOP and FP in\n                    order to both construct objects and classes, and also to make use of \"higher-order\" functions such as \"map\" and\n                    \"filter.\"\n                </article>\n            </article>\n            <article id=\"dom\" className=\"main-text-section\">\n                <h3>DOM</h3>\n                After the server sends its HTML, CSS, and JavaScript documents to the browser, that browser will construct a \n                Document Object Model or \"DOM\" as it's called. And this DOM is presented by a web API provided by the browser. So now \n                that the server has sent all required materials needed to construct the given page over to the browser, the browser \n                then parses the HTML in order to build the DOM. This DOM is built as a tree-like structure in which each node \n                corresponds to an element in the HMTL document. Afterwards, the browser can then utilize this tree to apply the CSS \n                styles to their respective HTML elements. The browser can simply traverse the DOM tree in order to find which CSS \n                selectors apply to which tree nodes (the HTML elements). So where do JavaScript and Express enter into this DOM\n                picture? Well the DOM API provides a set of objects, methods, and properties that allow JavaScript code to access\n                and manipulate the nodes (the HTML elements) and properties (CSS styles and methods) of the DOM tree. So the DOM\n                API provides many different types of objects, for example, the web developer can access the \"document\" object \n                which is actually the root of the DOM tree, and this \"document\" object will thus act as a global object with regards\n                to interaction with that web page. We can thus access the entire \"document\" if we like, or we can access nodes\n                further down in the DOM tree such as all &lt;paragraph&gt; tags, or a single &lt;paragraph&gt; element via its ID, or\n                a form via its class name. And the DOM API provides us with methods to do just this, we can use statements like\n                \"document.getElementsByTagName('p')\" or \"document.getElementById('my-paragraph')\" to access the element that we want to\n                manipulate via JavaScript. In that same JavaScript code, we can also write a line such as \"document.addEventListener\" \n                and these \"Event Listeners\" will be waiting for user-initiated \"Events\" which the JavaScript code will then respond to\n                based upon some developer-customized response. These \"Events\" can be anything from a page load, to a scroll, to a click,\n                to a form submission - however we want to act on the page. And this is where Express.js comes into the picture, we can\n                also link up elements in our HTML with user Events that can send requests to our Express server. In these Events we can\n                obtain various information from the DOM, including DOM elements or objects (and their methods or values), and pass this\n                information in the request to Express. The Express server can then be coded to deliver an Event-specific response back \n                to the client-side JavaScript, and this browser-side JavaScript can use the information in the server response to act\n                on the web page and make it dynamic. Web developers are thus able to update the DOM of a web page from both client-side\n                JavaScript and from server-side JavaScript via Express.\n            </article>\n        </>\n    );\n}\n\n\nexport default WebDevPage;\n\n    "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}