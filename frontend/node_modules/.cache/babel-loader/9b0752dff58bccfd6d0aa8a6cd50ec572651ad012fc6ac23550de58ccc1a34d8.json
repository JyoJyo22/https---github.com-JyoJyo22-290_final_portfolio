{"ast":null,"code":"var _jsxFileName = \"/Users/jojohoughton1/CS290/final_portfolio_cs290/frontend/src/pages/HomePage.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction HomePage() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"MERN Stack Website\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      id: \"mern-stack\",\n      className: \"main-text-section\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"This portfolio site has been created via a MERN stack. This means that the following Javascript-coupled languages have contributed to its construction, layout, and design:  MongoDB, Express, React, and Node. The database for this site is being maintained by MongoDB Atlas.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"MongoDB is known as a Document-oriented database management system (DBMS) in which data is stored as JSON \\\"documents.\\\" Documents that are similar will be added to the same \\\"Collection\\\" in order to organize data. And this database management is how we can make the State in our app persist across separate running instances of the app running on different servers. So this Mongo DBMS allows for concurrent execution of CRUD operations from multiple different users.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Now what is CRUD? This acronym stands for \\\"create, retrieve, update, delete\\\" and it is part of a web design philosophy known as \\\"REST.\\\" REST stands for \\\"Representational State Transfer\\\" and it is a protocol that allows for easy and convenient interaction with our web APIs. It adheres to the following commands in order to execute the respective CRUD operations seen above:   POST, GET, PUT, DELETE. This way, the handlers for different apps can be recognizable and easily read as long as they stick to the REST design. REST also requires that the server be \\\"State-less\\\" and that route handlers receive their route parameters from the URL.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Now how does this app interact with the data in MongoDB? Enter Mongoose. This is a Javascript library that slides in between Node.js and MongoDB in order to provide easy interaction between the two. Mongoose is known as a \\\"document object mapper,\\\" and so it maps objects in Javascript code to documents stored in MongoDB.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Mongoose is part of the \\\"Model\\\" layer of this app. And this is just one of three layers that apps are typically decomposed into:   Model, View, and Controller layers, or \\\"MVC.\\\" The Model layer is what manages the app's data. So for this app, the Model layer is made up of Mongoose interacting with MongoDB. The View layer is what actually displays the app to the users. So for this app, the View layer is made up of HTML, CSS, and all of the client-side React components that make the app interactive. The Controller layer is then the layer that connects these Model and View layers. The Controller layer is thus made up of Middleware APIs and route handlers that handle and process HTTP requests between the client-side and the server-side code. In this app, the Controller layer is comprised of Express.js, which is a framework built on top of Node. With all of these languages incorporated in, this app operates on Javascript from the front all the way to the database, thus completing the MERN stack.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","HomePage","children","fileName","_jsxFileName","lineNumber","columnNumber","id","className","_c","$RefreshReg$"],"sources":["/Users/jojohoughton1/CS290/final_portfolio_cs290/frontend/src/pages/HomePage.js"],"sourcesContent":["import React from \"react\"\n\nfunction HomePage() {\n    return(\n        <>\n            <h2>MERN Stack Website</h2>\n            <article id=\"mern-stack\" className=\"main-text-section\">\n                <ul>\n                    <li>\n                        This portfolio site has been created via a MERN stack. This means that the following Javascript-coupled \n                        languages have contributed to its construction, layout, and design:  MongoDB, Express, React, and Node. \n                        The database for this site is being maintained by MongoDB Atlas. \n                    </li>\n                    <li>\n                            MongoDB is known as a Document-oriented database management system (DBMS) in which data is stored as \n                        JSON \"documents.\" Documents that are similar will be added to the same \"Collection\" in order to \n                        organize data. And this database management is how we can make the State in our app persist across\n                        separate running instances of the app running on different servers. So this Mongo DBMS allows for \n                        concurrent execution of CRUD operations from multiple different users. \n                    </li>\n                    <li>\n                            Now what is CRUD? This acronym stands for \"create, retrieve, update, delete\" and it is part of a web \n                        design philosophy known as \"REST.\" REST stands for \"Representational State Transfer\" and it is a \n                        protocol that allows for easy and convenient interaction with our web APIs. It adheres to the following\n                        commands in order to execute the respective CRUD operations seen above:   POST, GET, PUT, DELETE. This \n                        way, the handlers for different apps can be recognizable and easily read as long as they stick to the REST\n                        design. REST also requires that the server be \"State-less\" and that route handlers receive their route \n                        parameters from the URL. \n                    </li>\n                    <li>\n                            Now how does this app interact with the data in MongoDB? Enter Mongoose. This is a Javascript library \n                        that slides in between Node.js and MongoDB in order to provide easy interaction between the two. Mongoose \n                        is known as a \"document object mapper,\" and so it maps objects in Javascript code to documents stored in \n                        MongoDB.\n                    </li>\n                    <li>\n                            Mongoose is part of the \"Model\" layer of this app. And this is just one of three layers that apps are\n                        typically decomposed into:   Model, View, and Controller layers, or \"MVC.\" The Model layer is what \n                        manages the app's data. So for this app, the Model layer is made up of Mongoose interacting with MongoDB.\n                        The View layer is what actually displays the app to the users. So for this app, the View layer is made up \n                        of HTML, CSS, and all of the client-side React components that make the app interactive. The Controller \n                        layer is then the layer that connects these Model and View layers. The Controller layer is thus made up of \n                        Middleware APIs and route handlers that handle and process HTTP requests between the client-side and the \n                        server-side code. In this app, the Controller layer is comprised of Express.js, which is a framework built \n                        on top of Node. With all of these languages incorporated in, this app operates on Javascript from the \n                        front all the way to the database, thus completing the MERN stack. \n                    </li>\n                </ul>\n            </article>\n        </>\n    );\n}\n\n\nexport default HomePage;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEzB,SAASC,QAAQA,CAAA,EAAG;EAChB,oBACIH,OAAA,CAAAE,SAAA;IAAAE,QAAA,gBACIJ,OAAA;MAAAI,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAC3BR,OAAA;MAASS,EAAE,EAAC,YAAY;MAACC,SAAS,EAAC,mBAAmB;MAAAN,QAAA,eAClDJ,OAAA;QAAAI,QAAA,gBACIJ,OAAA;UAAAI,QAAA,EAAI;QAIJ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAK,eACLR,OAAA;UAAAI,QAAA,EAAI;QAMJ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAK,eACLR,OAAA;UAAAI,QAAA,EAAI;QAQJ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAK,eACLR,OAAA;UAAAI,QAAA,EAAI;QAKJ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAK,eACLR,OAAA;UAAAI,QAAA,EAAI;QAWJ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAK;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACJ;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACC;EAAA,gBACX;AAEX;AAACG,EAAA,GAjDQR,QAAQ;AAoDjB,eAAeA,QAAQ;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}